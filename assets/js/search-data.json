{
  
    
        "post0": {
            "title": "",
            "content": "This is a dashboard of time series data from the Johns Hopkins COVID-19 public dataset, which is updated daily with confirmed cases, deaths, and recovered counts from around the world. . North America . Exponential everywhere, and not enough testing. . countries = [&#39;US&#39;, &#39;Canada&#39;, &#39;Mexico&#39;] states = [&#39;&#39;] * len(countries) start_dates = [&#39;3/7/20&#39;] * len(countries) states_df = pd.DataFrame({&#39;state&#39;: states, &#39;country&#39;: countries, &#39;start_date&#39;: start_dates}) generate_plots(states_df, COLUMNS) plt.show() . States in the United Sates . This is time series data for each state in the United States. Since there was no widespread testing in the United States prior to the first week of March, all of the time series plots start on `3/7/20&#39;. . Despite limited testing in the US, it&#39;s clear that every single state reporting is showing an exponential curve. . Within the United States, there are many regions, e.g., counties and cities (and cruise ships!) in there as well. The state data should be considered authoritative for cases within a state. See the appendix (likely will be moved to another notebook in the future) for an example of how this is the case for Washington State and its county data. . states_df = pd.read_csv(&quot;https://raw.githubusercontent.com/jflam/covid19/master/data/states.csv&quot;) countries = [&#39;US&#39;] * len(states_df) start_dates = [&#39;3/7/20&#39;] * len(states_df) states_df = pd.DataFrame({&#39;state&#39;: states_df[&quot;State&quot;], &#39;country&#39;: countries, &#39;start_date&#39;: start_dates}) generate_plots(states_df, COLUMNS) plt.show() . Provinces in Canada . It looks like BC was testing from a pretty early point in time. Most other provinces didn&#39;t start testing until much, much later. Ontario and Quebec both have rather steep slopes right now, albeit with relatively small numbers overall. But again, likely due to lack of testing. . provinces = [&#39;British Columbia&#39;, &#39;Alberta&#39;, &#39;Saskatchewan&#39;, &#39;Manitoba&#39;, &#39;Ontario&#39;, &#39;Quebec&#39;, &#39;New Brunswick&#39;, &#39;Nova Scotia&#39;, &#39;Prince Edward Island&#39;, &#39;Newfoundland and Labrador&#39;] countries = [&#39;Canada&#39;] * len(provinces) start_dates = [&#39;2/1/20&#39;] * len(provinces) canada_df = pd.DataFrame({&#39;state&#39;: provinces, &#39;country&#39;: countries, &#39;start_date&#39;: start_dates}) generate_plots(canada_df, COLUMNS) plt.show() . Selected Asian countries . It looks like China has had things under control for a while. South Korea is making good progress in turning the confirmed cases curve. Singapore and Taiwan had great early success, but it looks like visitors are driving infection rates rapidly now. . countries = [&#39;China&#39;, &#39;Korea, South&#39;, &#39;Singapore&#39;, &#39;Japan&#39;, &#39;Taiwan*&#39;, &#39;India&#39;] states = [&#39;&#39;] * len(countries) start_dates = [&#39;1/22/20&#39;] * len(countries) asian_countries_df = pd.DataFrame({&#39;state&#39;: states, &#39;country&#39;: countries, &#39;start_date&#39;: start_dates}) generate_plots(asian_countries_df, COLUMNS) plt.show() . Europe . The curve is exponential pretty much everywhere right now. . europe_df = pd.read_csv(&quot;https://raw.githubusercontent.com/jflam/covid19/master/data/Countries-Europe.csv&quot;) states = [&#39;&#39;] * len(europe_df) start_dates = [&#39;2/21/20&#39;] * len(europe_df) europe_countries_df = pd.DataFrame({&#39;state&#39;: states, &#39;country&#39;: europe_df[&#39;name&#39;].sort_values(), &#39;start_date&#39;: start_dates}) generate_plots(europe_countries_df, COLUMNS) plt.show() . Selected Central and South America Countries . countries = [&#39;Australia&#39;, &#39;New Zealand&#39;, &#39;Brazil&#39;, &#39;Chile&#39;, &#39;Argentina&#39;, &#39;Colombia&#39;, &#39;Venezuela&#39;, &#39;Ecuador&#39;, &#39;Bolivia&#39;, &#39;Peru&#39;, &#39;Guyana&#39;, &#39;Suriname&#39;, &#39;Paraguay&#39;, &#39;Uruguay&#39;] states = [&#39;&#39;] * len(countries) start_dates = [&#39;2/21/20&#39;] * len(countries) asian_countries_df = pd.DataFrame({&#39;state&#39;: states, &#39;country&#39;: countries, &#39;start_date&#39;: start_dates}) generate_plots(asian_countries_df, COLUMNS) plt.show() . References: data sources for the CSSE dataset: . World Health Organization (WHO): https://www.who.int/ | DXY.cn. Pneumonia. 2020. http://3g.dxy.cn/newh5/view/pneumonia. | BNO News: https://bnonews.com/index.php/2020/02/the-latest-coronavirus-cases/ | National Health Commission of the People’s Republic of China (NHC):http://www.nhc.gov.cn/xcs/yqtb/list_gzbd.shtml | China CDC (CCDC): http://weekly.chinacdc.cn/news/TrackingtheEpidemic.htm | Hong Kong Department of Health: https://www.chp.gov.hk/en/features/102465.html | Macau Government: https://www.ssm.gov.mo/portal/ | Taiwan CDC: https://sites.google.com/cdc.gov.tw/2019ncov/taiwan?authuser=0 | US CDC: https://www.cdc.gov/coronavirus/2019-ncov/index.html | Government of Canada: https://www.canada.ca/en/public-health/services/diseases/coronavirus.html | Australia Government Department of Health: https://www.health.gov.au/news/coronavirus-update-at-a-glance | European Centre for Disease Prevention and Control (ECDC): https://www.ecdc.europa.eu/en/geographical-distribution-2019-ncov-cases | Ministry of Health Singapore (MOH): https://www.moh.gov.sg/covid-19 | Italy Ministry of Health: http://www.salute.gov.it/nuovocoronavirus | . Appendix: Washington State . There is data for lots of individual counties within Washington State, but it looks like data from individual counties have been collapsed into the overall Washington State data as of 3/10/20: . regions = [&#39;King County, WA&#39;, &#39;Kittitas County, WA&#39;, &#39;Clark County, WA&#39;, &#39;Jefferson County, WA&#39;, &#39;Pierce County, WA&#39;, &#39;Grant County, WA&#39;, &#39;Snohomish County, WA&#39;, &#39;Skagit, WA&#39;, &#39;Thurston, WA&#39;, &#39;Island, WA&#39;, &#39;Whatcom, WA&#39;, &#39;Washington&#39;] countries = [&#39;US&#39;] * len(regions) start_dates = [&#39;3/7/20&#39;] * len(regions) interest_df = pd.DataFrame({&#39;state&#39;: regions, &#39;country&#39;: countries, &#39;start_date&#39;: start_dates}) generate_plots(interest_df, COLUMNS) plt.show() .",
            "url": "https://jflam.github.io/my-blog/2020/03/23/2020-03-23-dashboard.html",
            "relUrl": "/2020/03/23/2020-03-23-dashboard.html",
            "date": " • Mar 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jflam.github.io/my-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jflam.github.io/my-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jflam.github.io/my-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}